%h1
  Device Outline

%img{:id => "irimage", :src => "/uploads/110KV-避雷器.jpg", :style => "display:normal;"}/
%p
  * 单击,可添加一个轮廓顶点,并添加一段直线.
  %br/
  * 单击并拖动,可以添加一段圆滑的曲线.
  %br/
  * 拖动一段线段的控制点,可改变它的弯曲程度.
  %br/
  * 拖动一个顶点,可改变它的位置.
  %br/
  * Close the path to start a new one.
%p
  %a{ :id => "zoom_in" } 放大
  %a{ :id => "zoom_out" } 缩小

%canvas#canvas{:resize => "", :style => "width:415px; height:240px; border:1px solid;"}

%script{:canvas => "canvas", :type => "text/paperscript"}
  var path;
  var types = [ 'point', 'handleIn', 'handleOut' ];
  var zoom_scale = 1.0;
  
  var ir_raster = new Raster( 'irimage' );

  \//view.size = ir_raster.size;
  view.viewSize = ir_raster.size;
  alert( "view.zoom:" + view.zoom + " view.size:" + view.size + " view.viewSize:" + view.viewSize );

  \//view.zoom = zoom_scale;
  \//alert( "view.size:" + view.size );

  ir_raster.position = view.center;
  \//ir_raster.scale( zoom_scale );
  \//alert( "ir_raster size:" + ir_raster.size + " position:" + ir_raster.position );
  
  $( "#zoom_in" ).click( function() {
  zoom_scale *= 2.0;
  if( zoom_scale > 8.0 ) zoom_scale = 8.0;
  view.zoom = zoom_scale;
  \//ir_raster.scale( 2.0 );
  \//if( path ) path.scale( 2.0 );
  });

  $( "#zoom_out" ).click( function() {
  zoom_scale /= 2.0;
  if( zoom_scale < 0.5 ) zoom_scale = 0.5;
  view.zoom = zoom_scale;
  \//ir_raster.scale( 0.5 );
  \//if( path ) path.scale( 0.5 );
  });

  function findHandle( point ) {
  for ( var i = 0, l = path.segments.length; i < l; i++ ) {
  for( var j = 0; j < 3; j++) {
  var type = types[ j ];
  var segment = path.segments[ i ];
  var segmentPoint = type == 'point' ? segment.point : segment.point + segment[ type ];
  var distance = ( point - segmentPoint ).length;
  if( distance < 3 ) { return { type: type, segment: segment };
  }
  }
  }
  return null;
  }
  
  var currentSegment, mode, type;
  function onMouseDown(event) {
  var point = new Point( event.point/zoom_scale );
  \//alert( "event.point:" + event.point + " zoom_scale:" + zoom_scale +" point:" + point);

  if (currentSegment) currentSegment.selected = false;
  mode = type = currentSegment = null;
  
  if (!path) {
  path = new Path();
  \//path.fillColor = new HsbColor(360 * Math.random(), 1, 1, 0.5);
  }
  
  var result = findHandle(event.point);
  if (result) {
  currentSegment = result.segment;
  type = result.type;
  if (path.segments.length > 1 && result.type == 'point' && result.segment.index == 0) {
  mode = 'close';
  path.closed = true;
  \//path.selected = false;
  \//path = null;
  }
  }
  
  if (mode != 'close') {
  if( Key.isDown( 'shift' ) ) {
  mode = 'close';
  path.closed = true;
  \//path.selected = false;
  } else {
  mode = currentSegment ? 'move' : 'add';
  if( !currentSegment ) {
  if( !path.closed ) currentSegment = path.add(event.point);
  }
  if( currentSegment ) currentSegment.selected = true;
  }
  }
  }

  function onMouseDrag(event) {
  if (mode == 'move' && type == 'point') {
  currentSegment.point = event.point;
  } else if (mode != 'close') {
  var delta = event.delta.clone();
  if (type == 'handleOut' || mode == 'add') delta = -delta;
  currentSegment.handleIn += delta;
  currentSegment.handleOut -= delta;
  }
  }
